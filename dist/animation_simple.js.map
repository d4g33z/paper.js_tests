{"version":3,"sources":["webpack:///./node/extend.js (ignored)","webpack:///./node/self.js (ignored)","webpack:///./js/showfps.js","webpack:///./js/animation_simple.js"],"names":[],"mappings":";;;;;AAAA,e;;;;;;;ACAA,e;;;;;;;;ACAA;AAAA;AAAA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,sCAAsC,gBAAgB;AACtD;;AAEA;AACA;AACA;AACA;AACA;AACA,sCAAsC,gBAAgB;AACtD;AACA;AAAA;AAAA;;AAEA;AACA;AACA;AACA,CAAC;;;;;;;;;;;;;;;;AC/BD;;AAEA;AACA;;;;AAIA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA,YAAY;;AAEZ;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;;AAEA;AACA;AACA;AACA,YAAY;AACZ;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,CAAC","file":"animation_simple.js","sourcesContent":["/* (ignored) */\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node/extend.js (ignored)\n// module id = 13\n// module chunks = 1","/* (ignored) */\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node/self.js (ignored)\n// module id = 14\n// module chunks = 1","// show fps with help from\n// https://github.com/mrdoob/stats.js\n\nimport Stats from 'stats.js';\n\nexport default class ShowFPS {\n    constructor() {\n        // ******************************************\n        // display some stats\n        // https://github.com/mrdoob/stats.js\n        this.stats = new Stats();\n        // 0: fps, 1: ms, 2: mb, 3+: custom\n        this.stats.showPanel(0);\n        this.stats.dom.style.left = 'auto';\n        this.stats.dom.style.right = 0;\n        document.body.appendChild( this.stats.dom );\n\n        requestAnimationFrame( () => {this.animate();} );\n    }\n\n    animate() {\n        // this.stats.begin();\n        // // monitored code goes here\n        // this.stats.end();\n        this.stats.update();\n        requestAnimationFrame( () => {this.animate();} );\n    }\n}\n\n// Only executed our code once the DOM is ready.\nwindow.addEventListener(\"load\", function(event) {\n    const myShowFPS = new ShowFPS();\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./js/showfps.js\n// module id = 6\n// module chunks = 1","\nimport ShowFPS from './showfps';\n\nimport paper from 'paper';\nimport animatePaper from 'paper-animate';\n\n\n\nclass MainApp {\n    constructor(canvas_el) {\n        this.canvas_el = canvas_el;\n\n        this._initPaperJS();\n        this._initAnimations();\n\n        // var square = new paper.Path.Rectangle(new paper.Point(175, 175), new paper.Size(150,150));\n        // square.strokeColor = 'green';\n        // square.animate({\n        //     properties: {\n        //         position: {\n        //             x: \"+500\",\n        //             // x: 500,\n        //             y: 150     // absolute position. At the end, `y` will be : 150\n        //         },\n        //         strokeColor: {\n        //             hue: \"+100\",\n        //             brightness: \"+0.4\"\n        //         }\n        //     },\n        //     settings: {\n        //         duration:1500,\n        //         easing:\"linear\"\n        //     }\n        // });\n\n    }\n\n    _initPaperJS() {\n        this.paperscope = paper.setup(this.canvas_el);\n        // console.log(\"this.paperscope\", this.paperscope);\n\n        // set applyMatrix=false --> this means matrix can be read back...\n        this.paperscope.settings.applyMatrix = false;\n        // set this scope.project active:\n        // all newly created paper Objects go into this project.\n        this.paperscope.project.activate();\n\n        this.rect0 = new paper.Path.Rectangle({\n            point: [0, 0],\n            size: [200, 150],\n            strokeColor: 'lime',\n            fillColor: new paper.Color(1,1,1, 0.2),\n            name:\"rect0\"\n        });\n\n        this.paperscope.view.draw();\n    }\n\n    _initAnimations() {\n        // this.canvas_el.addEventListener(\"click\", (event) => {\n        //     this.moveToPosition(event);\n        // });\n        document.addEventListener(\"click\", (event) => this.moveToPosition(event));\n        document.addEventListener(\"keypress\", (event) => this.handleKeyPress(event));\n\n        this.breath_loop = false;\n\n        // this.rect0.onClick = function(event) {\n        //     console.log(\"this\", this);\n        //     console.log(\"event\", event);\n        //     // var event_delta = new paper.Point(event.dx, event.dy);\n        //     this.animate({\n        //\n        //     });\n        //\n        //\n        // };\n\n    }\n\n    handleKeyPress(event) {\n        // console.log(\"event\", event);\n        switch (event.key) {\n            case \" \": {\n                // space bar pressed\n                this.toggleBreath();\n            } break;\n            case \"p\": {\n                this.moveToAbsoluteNegativePosition();\n            } break;\n            case \"Enter\": {\n                // Do something for \"enter\" or \"return\" key press.\n            } break;\n            case \"Escape\":\n                // Do something for \"esc\" key press.\n            break;\n            default:\n                return; // Quit when this doesn't handle the key event.\n        }\n    }\n\n    moveToPosition(event) {\n        // console.log(\"this\", this);\n        // console.log(\"event\", event);\n        // const position_new = new paper.Point(event.clientX, event.clientY);\n\n        // console.log(\"this.rect0.position\", this.rect0.position);\n        // console.log(\"position_new\", position_new);\n\n        // this.rect0.position.x = event.clientX;\n        // this.rect0.position.y = event.clientY;\n        // this.paperscope.view.draw();\n\n        animatePaper.animate(this.rect0, {\n            properties: {\n                position: {\n                    x: event.clientX,\n                    y: event.clientY,\n                }\n            },\n            settings: {\n                duration: 500,\n                easing: \"swing\"\n            }\n        });\n    }\n\n    toggleBreath() {\n        if (this.breath_loop) {\n            this.breath_loop = false;\n        } else {\n            this.breath_loop = true;\n            // start animation\n            this.breath();\n        }\n        console.log(\"breath_loop:\", this.breath_loop);\n    }\n\n    breath() {\n        // console.log(\"this\", this);\n        // console.log(\"event\", event);\n\n        animatePaper.animate(this.rect0, [\n            {\n                properties: {\n                    scale: 1.2,\n                },\n                settings: {\n                    duration: 800,\n                    easing: \"swing\"\n                }\n            },\n            {\n                properties: {\n                    scale: 1,\n                },\n                settings: {\n                    duration: 800,\n                    easing: \"swing\",\n                    complete: () => {\n                        console.log('complete !');\n                        if (this.breath_loop) {\n                            this.breath();\n                        }\n                    }\n                }\n            }\n        ]);\n    }\n\n    moveToAbsoluteNegativePosition() {\n        animatePaper.animate(this.rect0, [\n            {\n                properties: {\n                    position: {\n                        x: 300,\n                        y: 300,\n                    },\n                },\n                settings: {\n                    duration: 500,\n                    easing: \"swing\",\n                },\n            },\n            {\n                properties: {\n                    position: {\n                        // this is an absolute position!!\n                        x: -100,\n                        // x: this.rect0.bounds.width * -1,\n                    },\n                },\n                settings: {\n                    duration: 500,\n                    easing: \"swing\",\n                },\n            },\n        ]);\n    }\n}\n\n\n// https://developer.mozilla.org/en-US/docs/Web/Events/DOMContentLoaded\n// The DOMContentLoaded event is fired when the initial HTML document has been\n// completely loaded and parsed, without waiting for stylesheets, images,\n// and subframes to finish loading.\n// A very different event 'load' should be used only to detect a fully-loaded page.\n// It is an incredibly popular mistake to use load where DOMContentLoaded\n// would be much more appropriate, so be cautious.\n\nwindow.addEventListener(\"load\", function(event) {\n    var canvas = document.getElementById('myCanvas');\n    const myapp = new MainApp(canvas);\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./js/animation_simple.js\n// module id = 8\n// module chunks = 1"],"sourceRoot":""}